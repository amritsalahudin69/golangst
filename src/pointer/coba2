package main

import "fmt"

type Product struct {
	name        string
	description string
	startPrice  int
	items       []*Item
}

type Item struct {
	name  string `json:"name"`
	price int    `json:"price"`
}

func NewProduct(productName string, descProduct string, price int) *Product {
	return &Product{
		name:        productName,
		description: descProduct,
		startPrice:  price,
	}
}

func (p *Product) AddItems() *Product {
	var itemData Struct{
		Items
	}
	return p
}

func (p *Product) GetName() string {
	return p.name
}

func (p *Product) GetDesc() string {
	return p.description
}

func (p *Product) GetStartPrice() int {
	return p.startPrice
}

func (p *Product) GetItems() []*Item {
	return p.items
}

func (it *Item) GetItemName() string {
	return it.name
}

func (it *Item) GetItemPrice() int {
	return it.price
}

func main() {
	items := `{"items":[{"name":"33 Diamond","price":3000},{"name":"73 Diamond","price":20000},{"name":"100 Diamond","price":50000}]}`

	productML := NewProduct("Mobile Legends", "Game Moba - Moontoon", 1000)
	err := productML.AddItems(items)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	fmt.Println("LIST ITEM " + productML.GetName())
	fmt.Println("Description Product" + productML.GetDesc())
	fmt.Println("Product Price ", productML.GetStartPrice())
	fmt.Println("Items:")
	for _, item := range productML.GetItems() {
		fmt.Printf("%s - %d\n", item.GetItemName(), item.GetItemPrice())
	}

}


func NewNamaCust(NewNamaCust string, NewKtp string) *NamaCust {
	return &NamaCust{
		Nama: NewNamaCust,
		Ktp:  NewKtp,
	}
}

func (n *NamaCust) getNama() string {
	return n.Nama
}

func (n *NamaCust) getKtp() string {
	return n.Ktp
}

func (n *NamaCust) getPesanan() *Order {
	return n.Pesanan
}

